console.clear();

var a = [];
var s = 100;
var sel = null;
var sell = [];
var mx = 0,
	my = 0;
var an = 0;
var empty = [];
var sol = [
	['Meow'],
	[0, 0],
	[1, 0],
	[2, 0],
	[3, 0],
	[0, 1],
	[1, 1],
	[2, 1],
	[3, 1],
	[0, 2],
	[1, 2],
	[2, 2],
	[3, 2],
	[0, 3],
	[1, 3],
	[2, 3],
	[3, 3]
];

document.oncontextmenu = function() {
	return false;
}

function setup() {
	createCanvas(s * 4, s * 4);
	var difficulty = 50; // |_()()I< --> [ Change 'difficulty' to any number you want to change difficulty! ] <--
	background(0);
	var move = [];
	var moves = ['up', 'right', 'down', 'left'];
	for (var i = 0; i < difficulty; i++) {
		move[i] = random(moves);
	}
	var smth = 0;
	var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
	for (var i = 0; i < 4; i++) {
		a[i] = [];
		for (var j = 0; j < 4; j++) {
			smth = floor(random(arr.length));
			a[i][j] = new Thing(i, j, s, arr[smth]);
			arr.splice(smth, 1);
		}
	}


// 	getEmpty();

 	a[3].pop();
}

function getEmpty() {
	var loc = [];
	for (thing of a) {
		for (extra of thing) {
			for (var i = 0; i < 4; i++) {
				for (var j = 0; j < 4; j++) {
					var x = extra.x / s;
					var y = extra.y / s;
					if (x == i && y == j) {
						console.log(i, j);
					} else {
						console.log('EMPTY', i, j);
					}
				}
			}
		}
	}
	return loc;
}

function draw() {
	background(0);
	noStroke();
	fill(0, 255, 255);
	rectMode(CORNER)
	rect(0, 0, width, height);
	//______________________
	for (var i = 0; i < a.length; i++) {
		for (var j = 0; j < a[i].length; j++) {
			a[i][j].draw(s);
			if (mouseIsPressed & !sel & a[i][j].touch()) {
				sel = a[i][j].n;
				sell[0] = i;
				sell[1] = j;
			}
		}
	}

	var qwerty = 0;

	for (papa of a) {
		for (bleh of papa) {
			var xx = floor(bleh.x / bleh.r);
			var yy = floor(bleh.y / bleh.r);
			var vv = [xx, yy];
			if (bleh.check(vv)) {
				qwerty++;
			}
		}
	}

if (qwerty >= 15) {
		noLoop();
		stroke(0);
		strokeWeight(5);
		fill(230);
		textAlign(CENTER, CENTER);
		text('YOU WIN', width / 2, height / 2);
	}

	if (mouseIsPressed & !!sel) {
		an = atan2(mouseY - my, mouseX - mx);
	}
}

function Thing(x, y, r, n) {
	this.n = n;
	this.r = r;
	this.x = x * this.r;
	this.y = y * this.r;

	this.draw = function(r) {
		this.r = r;
		x = this.x;
		y = this.y;
		var xx = floor(this.x / this.r);
		var yy = floor(this.y / this.r);
		var vv = [xx, yy];
		//console.log('My Position : ',vv,"Solution :",sol[this.n],"Number :",this.n);
		//noLoop();
		var bool = this.check(vv);
		if (bool) {
			stroke(0, 50, 200);
		} else {
			stroke(100, 165, 255);
		}
		strokeWeight(r / 25);
		rectMode(CENTER);
		if (sel == this.n) {
			fill(0, 100, 255);
		} else {
			fill(0, 50, 255);
		}
		rect(x + r / 2, y + r / 2, r / 1.2, r / 1.2);
		noStroke();
		fill((bool) ? color(0, 255, 100) : color(255, 100, 155));
		textSize(r / 2);
		textAlign(CENTER, CENTER);
		text(this.n, x + r / 2, y + r / 2);
	}

	this.check = function(second) {
		return (sol[this.n][0] == second[0] & sol[this.n][1] == second[1]);
	}
	this.move = function(sx, sy) {
		var x = this.x + (sx * this.r);
		var y = this.y + (sy * this.r);
		var lmao = 0;
		var d = 0;
		for (var i = 0; i < a.length; i++) {
			for (var j = 0; j < a[i].length; j++) {
				d = dist(a[i][j].x, a[i][j].y, x, y);
				if (d < this.r) {
					lmao = 1;
				}
			}
		}
		if (lmao == 0) {
			this.x = constrain(x, 0, width - this.r);
			this.y = constrain(y, 0, height - this.r);
		}
		// this.x += sx * this.r;
		// this.y += sy * this.r;
	}

	this.touch = function() {
		if (mouseX > this.x & mouseY > this.y &&
			mouseX < this.x + this.r & mouseY < this.y + this.r) {
			return true;
		} else {
			return false;
		}
	}
}

function mousePressed() {
	mx = mouseX;
	my = mouseY;
}

function mouseReleased() {
	var d = dist(mx, my, mouseX, mouseY)
	var top_left = -2.192;
	var top_right = -0.852;
	var bottom_right = 0.656;
	var bottom_left = 2.401;
	if (!!sel & d > s / 2) {
		if (an > top_left & an < top_right) { //up
			// print('up');
			a[sell[0]][sell[1]].move(0, -1);
		} else if (an > top_right & an < bottom_right) { //right
			// print('right');
			a[sell[0]][sell[1]].move(1, 0);
		} else if (an > bottom_right & an < bottom_left) { //bottom
			// print('bottom');
			a[sell[0]][sell[1]].move(0, 1);
		} else if (an > bottom_left | an < top_left) { //left
			// print('left');
			a[sell[0]][sell[1]].move(-1, 0);
		}
	}
	sell = [];
	sel = null;
}
